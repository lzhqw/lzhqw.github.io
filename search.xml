<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速入门：如何在Linux服务器上跑爬虫</title>
      <link href="/2023/12/20/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/"/>
      <url>/2023/12/20/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门在linux服务器上部署和运行爬虫程序">快速入门：在Linux服务器上部署和运行爬虫程序</h1><h2 id="服务器准备工作">服务器准备工作</h2><h3 id="购买一个服务器实例">购买一个服务器实例</h3><p>以阿里云为例，阿里云现在有学生优惠，可以在以下链接领取：https://university.aliyun.com/</p><p>然后租一个2核2G的服务器，仅需285元，优惠下来只需0元即可租一年，还多出来15块钱可以缴十几个G的流量钱。</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/%E9%98%BF%E9%87%8C%E4%BA%91-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E7%95%8C%E9%9D%A2.png" /></p><h3 id="绑定弹性网卡">绑定弹性网卡</h3><blockquote><p>参考：</p><p>弹性网卡概述：<a href="https://help.aliyun.com/zh/ecs/user-guide/overview-48">弹性网卡概述_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p><p>如何创建弹性网卡：<a href="https://help.aliyun.com/zh/ecs/user-guide/create-an-eni">如何创建弹性网卡_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p></blockquote><p>绑定弹性网卡的功能：</p><ol type="1"><li>绑定弹性网卡以访问外网</li><li>获得公网ip，从而可以ssh访问</li></ol><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%BC%B9%E6%80%A7%E7%BD%91%E5%8D%A1.png" /></p><h3 id="设置安全组">设置安全组</h3><blockquote><p>参考：</p><p>安全组概述：<a href="https://help.aliyun.com/zh/ecs/user-guide/overview-44">什么是安全组_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p><p>设置安全组：<a href="https://help.aliyun.com/zh/ecs/user-guide/create-a-security-group-1">如何创建一个安全组并设置安全组规则_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p></blockquote><p>服务器设有防火墙，如果需要从本地访问服务器的MongoDB，则会被服务器的防火墙阻拦，因此需要设置安全组，允许访问27017端口。</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%AE%89%E5%85%A8%E7%BB%84.png" /></p><h2 id="配置mongodb">配置MongoDB</h2><h3 id="安装mongodb">安装MongoDB</h3><blockquote><p>参考：<a href="https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/">在 Ubuntu 上安装 MongoDB Community Edition — MongoDB 手册</a></p></blockquote><p>主要参照MongoDB手册，为了阅读方便，将关键内容摘抄如下：</p><h4 id="导入mongodb的public-key">1. 导入MongoDB的public key</h4><p>安装<code>gnupg</code>和<code>curl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnupg curl</span><br></pre></td></tr></table></figure><p>导入 MongoDB public GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://pgp.mongodb.com/server-7.0.asc | \</span><br><span class="line">   sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \</span><br><span class="line">   --dearmor</span><br></pre></td></tr></table></figure><p>创建MongoDB的列表文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-7.0.list</span><br></pre></td></tr></table></figure><p>更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装最新的稳定版的MongoDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure><p>在systemd下启动MongoDB</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mongod</span><br></pre></td></tr></table></figure><h3 id="创建管理员">创建管理员</h3><p>为了防止被攻击，需要设定管理员角色，这样的话访问MongoDB需要账户密码。</p><h4 id="启用访问控制">1. 启用访问控制</h4><p>编辑 MongoDB 的配置文件（通常是 <code>etc/mongod.conf</code>），以启用访问控制。在配置文件中添加或更新以下行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>这将启用用户认证。</p><blockquote><p>一般情况下服务器进去默认在root，etc和root在同一级文件夹中，访问etc需要先到上一级文件夹再访问</p></blockquote><h4 id="重启-mongodb-服务">2. 重启 MongoDB 服务</h4><p>更改配置后，需要重启 MongoDB 服务以应用更改。这通常可以通过以下命令完成（systemd系统下）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mongod</span><br></pre></td></tr></table></figure><h4 id="连接到-mongodb-shell">3. 连接到 MongoDB Shell</h4><p>使用 MongoDB Shell 连接到数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh</span><br></pre></td></tr></table></figure><h4 id="创建管理员用户">4. 创建管理员用户</h4><p>在 MongoDB Shell 中，切换到 <code>admin</code> 数据库并创建一个新用户：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.<span class="title function_">createUser</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;your_user_name&quot;</span>,</span><br><span class="line">  <span class="attr">pwd</span>: <span class="string">&quot;your_password&quot;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [&#123; <span class="attr">role</span>: <span class="string">&quot;userAdminAnyDatabase&quot;</span>, <span class="attr">db</span>: <span class="string">&quot;admin&quot;</span> &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将 <code>"myAdmin"</code> 和 <code>"adminPassword"</code> 替换为自己的用户名和密码。</p><h4 id="退出并以管理员身份重新登录">5. 退出并以管理员身份重新登录</h4><p>退出 MongoDB Shell（使用 <code>exit</code> 命令），然后使用您刚创建的管理员账户重新登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh -u &lt;your_user_name&gt; -p &lt;your_password&gt; --authenticationDatabase admin</span><br></pre></td></tr></table></figure><h2 id="tmux">tmux</h2><blockquote><p>参考：<a href="https://blog.csdn.net/Naisu_kun/article/details/119567566">Linux笔记：终端复用与管理工具screen和tmux_tmux和screen-CSDN博客</a></p><p>更多功能参见：<a href="https://www.bilibili.com/video/BV1ML411h7tF">终端神器tmux：多任务管理大师</a></p></blockquote><p>假设已经可以通过ssh连接服务器了，为了保证程序可以在后台运行，需要使用终端复用与管理工具<code>tmux</code>。</p><h3 id="安装tmux">安装tmux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tmux</span><br></pre></td></tr></table></figure><h3 id="常用命令">常用命令</h3><ol type="1"><li><p>创建一个名为name新会话并进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s name</span><br></pre></td></tr></table></figure></li><li><p>进入一个已经创建了的会话：</p></li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a -t name</span><br></pre></td></tr></table></figure></p><ol start="3" type="1"><li><p>退出会话：先按<code>ctrl+b</code>，然后再按<code>d</code></p></li><li><p>上下翻页：先按<code>ctrl+b</code>，然后再按<code>PgUp</code>，按<code>q</code>退出</p></li><li><p>结束会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill-session -t name</span><br></pre></td></tr></table></figure></li></ol><p>使用<code>tmux</code>创建一个会话并在其中运行爬虫程序，这样断开ssh连接后爬虫仍会继续运行。</p>]]></content>
      
      
      <categories>
          
          <category> web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> mongodb </tag>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github pages部署个人博客</title>
      <link href="/2023/12/19/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/"/>
      <url>/2023/12/19/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/</url>
      
        <content type="html"><![CDATA[<h1 id="hexogithub-pages部署个人博客">Hexo+github pages部署个人博客</h1><p>参考：</p><blockquote><p><a href="https://www.fomal.cc/posts/e593433d.html">Hexo博客搭建基础教程(一) | Fomalhaut🥝</a></p><p><a href="https://www.fomal.cc/posts/4aa2d85f.html#5-基础用法说明">Hexo博客搭建基础教程(二) | Fomalhaut🥝</a></p><p><a href="https://butterfly.js.org/posts/ceeb73f/#美化-特效">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p></blockquote><h2 id="step1.-安装node.js和npm">step1. 安装Node.js和npm</h2><ul><li><p>访问 <a href="https://nodejs.org/">Node.js 官网</a> 下载Node.js</p></li><li><p>安装完成后，可以在命令行中输入以下命令来验证安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="step2.-hexo的安装与初始化">step2. Hexo的安装与初始化</h2><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化">初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> BlogRoot</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="安装依赖">安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="在本地运行hexo服务器">在本地运行Hexo服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="step3.-部署到github-pages上">step3. 部署到github pages上</h2><ol type="1"><li><p>创建一个github仓库，名称必须为<code>&lt;username&gt;.github.io</code></p></li><li><p>创建ssh密钥，一路回车</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></p><p>在users/username/.ssh中可以看到生成的密钥文件，其中以<code>.pub</code>为结尾的是公钥。在github的<code>settings &gt; SSH and GPG keys</code>的<code>SSH keys</code>中点击<code>New SSH key</code>，复制公钥并添加。</p><p>检测是否能与github正常通信：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p></li><li><p>在<code>BlogRoot/_config.yml</code>中设置deploy选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:&lt;repository git&gt;</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>部署</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="step4.-基于butterfly设置blog样式">step4. 基于butterfly设置blog样式</h2><h3 id="butterfly-安装">butterfly 安装</h3><ol type="1"><li><p>在<code>BlogRoot</code>目录下下载butterfly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li><li><p>安装主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure></li><li><p>安装hexo渲染插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.yml</code>中将<code>theme</code>的值更改为butterfly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li></ol><h3 id="butterfly设置">butterfly设置</h3><ol type="1"><li><p>标签页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>该指令会在<code>BlogRoot/source</code>下生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。进入<code>index.md</code>并添加<code>type: "tags"</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-10-28 12:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>404页面</p><p>将false改为true</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;Page Not Found&#x27;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="butterfly主题设置">butterfly主题设置</h3><h4 id="menu">menu</h4><p>在这里可以修改menu界面，冒号前为显示的名称，冒号后为文件夹名称，注意要通过<code>hexo new page &lt;文件夹名称&gt;</code>来创建文件夹</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20menu.png" /></p><h4 id="代码风格">代码风格</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20code%20block.png" /></p><h4 id="社交信息">社交信息</h4><p>可以放一些github和email之类的</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly-social%20settings.png" /></p><h4 id="网站图标">网站图标</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-Favicon.png" /></p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20favicon.png" /></p><p>将图片添加至<code>BlogRoot/themes/butterfly/source/img</code>，并修改图片地址</p><h4 id="头像横幅页面图标">头像、横幅、页面图标</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20img.png" /></p><h4 id="搜索栏">搜索栏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在<code>BlogRoot/_config.yml</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20search.png" /></p><p>将<code>enable</code>和<code>preload</code>改为true</p><h4 id="cover">cover</h4><p>文章封面，需要在文章开头的yml中添加<code>cover</code>才会生效，但个设置多个<code>default_cover</code>时，会选一个展示</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-cover.png" /></p><h4 id="post">post</h4><p>如何显示时间，是否显示标签等</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-post.png" /></p><h4 id="wordcount">wordcount</h4><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>将wordcount的<code>enable</code>改为<code>true</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="文章过期提醒">文章过期提醒</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-outdated.png" /></p><h4 id="自定义颜色">自定义颜色</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-color.png" /></p><h4 id="background">background</h4><p>当使用本地图片时，填img开始的相对路径，注意img前要加斜杠</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-background.png" /></p><h4 id="侧边栏相关配置">侧边栏相关配置</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-aside.png" /></p><h4 id="pandoc-与-mathjax">pandoc 与 mathjax</h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/544093361">知乎、Hexo的markdown中LaTeX公式相关问题。</a></p></blockquote><p>将mathjax设置为<code>true</code>在需要渲染的blog前加入<code>mathjax: true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用Graphviz画有向图/无向图</title>
      <link href="/2022/10/07/graphviz/"/>
      <url>/2022/10/07/graphviz/</url>
      
        <content type="html"><![CDATA[<h1 id="如何利用graphviz画有向图无向图">如何利用Graphviz画有向图/无向图</h1><h2 id="任务说明">任务说明</h2><p>我现在有一张图，这张图的储存方式为：</p><ul><li>一个列表包含所有节点</li><li>节点中储存着节点与节点之间的关系</li></ul><p>这张图的结构为：</p><ul><li>节点分为输入节点，中间节点和输出节点</li><li>我希望输出节点和输入节点能够在一排或一列显示</li></ul><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/graphviz/Digraph.gv.jpg" /></p><h2 id="安装graphviz">安装Graphviz</h2><p>graphviz实际上是一个软件，但是可以用python生成dot脚本，再用graphviz解析得到图片</p><h3 id="step1.-下载graphviz软件">step1. 下载Graphviz软件</h3><p>下载路径：</p><p>https://graphviz.gitlab.io/_pages/Download/Download_windows.html</p><p>安装时需要将bin文件夹的路径加入到环境变量path</p><p>注意在安装的时候会有提示是否要把bin加入环境变量，直接勾选即可，省去很多步骤</p><h3 id="step2.-pip安装graphviz">step2. pip安装graphviz</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure><h2 id="graphviz的一些使用方法">Graphviz的一些使用方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> graphviz <span class="keyword">as</span> gz</span><br></pre></td></tr></table></figure><h3 id="创建图">创建图</h3><p>有向图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph = gz.Digraph()</span><br></pre></td></tr></table></figure><p>无向图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph = gz.Graph()</span><br></pre></td></tr></table></figure><h3 id="创建节点">创建节点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.node(name=<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>name只能为字符串</p><p>node属性：</p><table><thead><tr class="header"><th style="text-align: center;">attrs</th><th style="text-align: center;">describe</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">name</td><td style="text-align: center;">相当于id</td></tr><tr class="even"><td style="text-align: center;">color</td><td style="text-align: center;">边框颜色，如果style='filled'为填充颜色可以用关键字，比如black，也可以用16进制</td></tr><tr class="odd"><td style="text-align: center;">style</td><td style="text-align: center;">filled-进行填充</td></tr><tr class="even"><td style="text-align: center;">label</td><td style="text-align: center;">node在图中显示的内容</td></tr><tr class="odd"><td style="text-align: center;">shape</td><td style="text-align: center;">node的形状，关键词见下图</td></tr><tr class="even"><td style="text-align: center;">fontname</td><td style="text-align: center;">更改字体</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/graphviz/20221007165448.jpg" /></p><h3 id="创建关系">创建关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.edge(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="画图">画图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.view()</span><br></pre></td></tr></table></figure><h3 id="使用子图对输入节点和输出节点的位置进行规定">使用子图对输入节点和输出节点的位置进行规定</h3><p>参考:python中graphviz中的图节点位置(https://www.codenong.com/34747843/)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph = gz.Digraph()</span><br><span class="line">top = gz.Digraph()</span><br><span class="line">top.graph_attr.update(rank=<span class="string">&#x27;min&#x27;</span>)</span><br><span class="line"><span class="comment"># 将输入节点添加到top中，其余节点添加到graph中，edge的创建则依然在graph中创建</span></span><br><span class="line"><span class="comment"># ···略去一些添加节点和边步骤</span></span><br><span class="line"><span class="comment"># 然后将s加入到graph的子图中即可</span></span><br><span class="line">graph.subgraph(s)</span><br><span class="line">graph.view()</span><br></pre></td></tr></table></figure><p>如果要输出节点也对其的话只需要再添加一个子图，rank设为max即可。但注意这可能并没有解决所有图的对其问题，如果有更多的行/列需要对齐呢？</p><h2 id="附录">附录</h2><p>graphviz所有的属性 见 (https://www.cnblogs.com/Zzbj/p/11431015.html)</p><p>基础教程 见 (https://www.jb51.net/article/174842.htm)</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphviz </tag>
            
            <tag> 画图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计学：卡方分布临界值的计算</title>
      <link href="/2022/03/19/%E5%8D%A1%E6%96%B9%E5%88%86%E5%B8%83%E4%B8%B4%E7%95%8C%E5%80%BC%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2022/03/19/%E5%8D%A1%E6%96%B9%E5%88%86%E5%B8%83%E4%B8%B4%E7%95%8C%E5%80%BC%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="统计学卡方分布临界值的计算">统计学：卡方分布临界值的计算</h1><h2 id="前言">前言</h2><p>做应用统计分析的课后习题时，有一道题的<span class="math inline">\(\chi^2\)</span>分布临界值在表上查不到。老师给出的解决办法是在EXCEL中用=CHISQ.INV.RT(<span class="math inline">\(\alpha\)</span>, n)来计算。但是这样未免有些无聊，为什么不自己写一个程序呢？</p><h2 id="准备知识">准备知识</h2><h3 id="卡方分布的分布函数">卡方分布的分布函数</h3><p><span class="math display">\[F(x,k)=\frac{\gamma (\frac{k}{2},\frac{x}{2})}{\Gamma(\frac{k}{2})}\]</span></p><p>其中： <span class="math display">\[\gamma (s,x)=\int_0^xe^{-t}t^{s-1}dt\]</span> <span class="math display">\[\Gamma (s)=\int_0^\infty e^{-t}t^{s-1}dt\]</span></p><h3 id="临界值">临界值</h3><p><span class="math display">\[P(X&lt;x)=F(x,k)\]</span></p><figure><img src="https://www.gigacalculator.com/img/calculators/two-tailed-z-critical-value.png" alt="two tailed z critical value" /><figcaption aria-hidden="true">two tailed z critical value</figcaption></figure><p>所谓临界值就是求得一个<span class="math inline">\(x\)</span>使得<span class="math inline">\(P(X&lt;x)\)</span>大于等于置信水平。 由此我们列出关于<span class="math inline">\(x\)</span>的方程，其中<span class="math inline">\(\alpha\)</span>为拒绝域面积，1-<span class="math inline">\(\alpha\)</span>为置信水平： <span class="math display">\[F(x,k)=1-\alpha\]</span></p><h3 id="scipy模块">scipy模块</h3><p>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。 本次用到SciPy中的积分模块和求解非线性方程组的模块</p><p>含参数定积分： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> integrate</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * x + b</span><br><span class="line">v, err = integrate.quad(f, <span class="number">1</span>, <span class="number">2</span>, args = (-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> v</span><br></pre></td></tr></table></figure> 非线性方程求解（最小二乘法）： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = fsolve(func,[])</span><br><span class="line"><span class="comment">#[]中为初值</span></span><br></pre></td></tr></table></figure></p><h2 id="python实现">python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> integrate</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</span><br><span class="line"><span class="comment">#定义伽马函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gamma</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">t,s</span>):</span><br><span class="line">        <span class="keyword">return</span> math.exp(-t)*<span class="built_in">pow</span>(t,s-<span class="number">1</span>)</span><br><span class="line">    v,err=integrate.quad(f,<span class="number">0</span>,<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),args=(s))</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="comment">#定义上不完全伽马函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LI_gamma</span>(<span class="params">s,x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">t,s</span>):</span><br><span class="line">        <span class="keyword">return</span> math.exp(-t)*<span class="built_in">pow</span>(t,s-<span class="number">1</span>)</span><br><span class="line">    v,err=integrate.quad(f,<span class="number">0</span>,x,args=(s))</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="comment">#定义卡方分布的分布函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fchi</span>(<span class="params">x,k</span>):</span><br><span class="line">    F=LI_gamma(k/<span class="number">2</span>,x/<span class="number">2</span>)/gamma(k/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> F</span><br><span class="line"><span class="comment">#方程求解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cv_chi</span>(<span class="params">alpha,n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> Fchi(x,n)-<span class="number">1</span>+alpha</span><br><span class="line">    r=optimize.fsolve(func,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><p>运行结果： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alpha=<span class="number">0.025</span>,n=<span class="number">40</span>: <span class="number">59.341707143171185</span></span><br><span class="line">alpha=<span class="number">0.025</span>,n=<span class="number">10</span>: <span class="number">20.483177350807395</span></span><br></pre></td></tr></table></figure> 与卡方分布临界值表完全一致</p><h2 id="参考文献">参考文献</h2><p><a href="https://www.zhihu.com/question/30020592">卡方分布的概率密度函数推导过程? - 知乎 (zhihu.com)</a></p><p><a href="https://en.wikipedia.org/wiki/Chi-squared_distribution">卡方分布 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://en.wikipedia.org/wiki/Incomplete_gamma_function#Regularized_Gamma_functions_and_Poisson_random_variables">不完全伽玛函数 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://zhuanlan.zhihu.com/p/24893371">Python 解方程的三种方法 - 知乎(zhihu.com)</a></p><p><a href="https://www.cnblogs.com/Yanjy-OnlyOne/p/11185582.html">python Scipy积分运算大全（integrate模块——一重、二重及三重积分） - The-Chosen-One - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计 </tag>
            
            <tag> 卡方分布 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
