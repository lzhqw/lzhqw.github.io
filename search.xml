<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何在PyTorch中自定义Optimizer</title>
      <link href="/2024/01/30/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89optimizer/"/>
      <url>/2024/01/30/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89optimizer/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在pytorch中自定义优化器">如何在PyTorch中自定义优化器</h1><h2 id="optimizer类">Optimizer类</h2><p>所有优化器都继承自Optimizer类。</p><p>Optimizer初始化的时候接受<code>params</code>和<code>defaults</code>两个变量，分别是模型参数和优化器的超参。</p><p>Optimizer的变量如下：</p><table><thead><tr class="header"><th style="text-align: center;">变量名称</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>state</code></td><td style="text-align: center;">储存状态变量</td></tr><tr class="even"><td style="text-align: center;"><code>param_groups</code></td><td style="text-align: center;">储存每一组参数的值、梯度和超参</td></tr></tbody></table><p>其中state是一个字典，储存的是优化器中的状态变量，比如<code>Adam</code>中的<span class="math inline">\(m_t\)</span>和<span class="math inline">\(v_t\)</span>，其结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">state</span><br><span class="line">-- p1</span><br><span class="line">-- state 1</span><br><span class="line">-- Tensor</span><br><span class="line">-- state 2</span><br><span class="line">-- ...</span><br><span class="line">-- state n</span><br><span class="line">-- p2</span><br><span class="line">-- ...</span><br><span class="line">-- pn</span><br></pre></td></tr></table></figure><p>假设一个模型被划分为了<span class="math inline">\(N\)</span>个group，优化器有<span class="math inline">\(n\)</span>个超参数，则param_groups的结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">param_groups</span><br><span class="line">-- param_group 1</span><br><span class="line">-- params</span><br><span class="line">-- p1</span><br><span class="line">-- data</span><br><span class="line">-- grad</span><br><span class="line">-- ...</span><br><span class="line">-- p2</span><br><span class="line">-- ...</span><br><span class="line">-- pk</span><br><span class="line">-- hyperparameter 1</span><br><span class="line">-- hyperparameter 2</span><br><span class="line">-- ...</span><br><span class="line">-- hyperparameter n</span><br><span class="line">-- param_group 2</span><br><span class="line">-- ...</span><br><span class="line">-- param group N</span><br></pre></td></tr></table></figure><p>其中不同的<code>param group</code>是人为划分的，用于给不同的层不同的超参数，类似下面的代码（默认情况下只有一个<code>param group</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">optimizer = Adam([</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: model.layer1.parameters(), <span class="string">&#x27;lr&#x27;</span>: <span class="number">0.01</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: model.layer2.parameters(), <span class="string">&#x27;lr&#x27;</span>: <span class="number">0.001</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>每个<code>param_group</code>都是一个字典，包含<code>params</code>和<code>defaults</code>中所有超参。<code>params</code>中包含若干个模型参数，简记为<code>p</code>，如<code>fc1.weight</code>，<code>fc1.bias</code>等，<code>p</code>是一个<code>Tensor</code>，拥有所有<code>Tensor</code>的方法。在优化器中，会更关注<code>p.data</code>和<code>p.grad</code>，前者储存的是模型的参数，后者储存的是该参数的梯度。</p><p>Optimizer类的所有方法如下：</p><table><thead><tr class="header"><th style="text-align: center;">方法名称</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>Optimizer.add_param_group</code></td><td style="text-align: center;">向Optimizer的<code>param_groups</code>中添加一个<code>param_group</code></td></tr><tr class="even"><td style="text-align: center;"><code>Optimizer.load_state_dict</code></td><td style="text-align: center;">加载<code>state</code>变量</td></tr><tr class="odd"><td style="text-align: center;"><code>Optimizer.state_dict</code></td><td style="text-align: center;">以字典形式返回optimizer中的<code>state</code></td></tr><tr class="even"><td style="text-align: center;"><code>Optimizer.step</code></td><td style="text-align: center;">进行一次优化操作（参数更新）</td></tr><tr class="odd"><td style="text-align: center;"><code>Optimizer.zero_grad</code></td><td style="text-align: center;">重置所有模型参数的梯度</td></tr></tbody></table><p>这些方法主要是在训练模型的时候进行的操作，如<code>Optimizer.step()</code>和<code>Optimizer.zero_grad()</code>在自定义优化器的过程中都不是很重要。</p><h2 id="in-place函数">In-Place函数</h2><p>在优化器中，为了节省内存或显存，会大量使用in-place函数来原地操作各种<code>state</code>和<code>param</code>，一些常见的in-place函数如下：</p><table><colgroup><col style="width: 50%" /><col style="width: 50%" /></colgroup><thead><tr class="header"><th style="text-align: center;">函数名称</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>add_(x,alpha)</code></td><td style="text-align: center;"><span class="math inline">\(\mathbf{y} \leftarrow \mathbf{y} + \alpha \mathbf{x}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>mul_(x)</code></td><td style="text-align: center;"><span class="math inline">\(\mathbf{y} \leftarrow \mathbf{x}\odot\mathbf{y}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>addcmul_(x1,x2,value)</code></td><td style="text-align: center;"><span class="math inline">\(\mathbf{y}\leftarrow \mathbf{y}+v\mathbf{x}_1\odot \mathbf{x}_2\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>clamp(min,max)</code></td><td style="text-align: center;"><span class="math inline">\(\mathbf{y}\leftarrow \min(\max(\mathbf{y},min),max)\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>sqrt()</code></td><td style="text-align: center;"><span class="math inline">\(\mathbf{y}\leftarrow \sqrt{\mathbf{y}}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>lerp(x,weight)</code></td><td style="text-align: center;"><span class="math inline">\(\mathbf{y}\leftarrow \mathbf{x}+w(\mathbf{y}-\mathbf{x})\)</span></td></tr></tbody></table><h2 id="代码结构与示例adamw">代码结构与示例：AdamW</h2><p>接下来以<code>AdamW</code>为例介绍一下如何自定义一个优化器，并给出一个通用的自定义优化器的代码结构。</p><p>首先给出<code>AdamW</code>的数学表达：</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/1692177946821.png" /></p><h3 id="step0.-导入必要的库">step0. 导入必要的库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> Tensor</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> Optimizer, paramsT</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span>, <span class="type">Union</span>, <span class="type">List</span></span><br></pre></td></tr></table></figure><p>其中，<code>Tensor</code>,<code>params_t</code>,<code>Tuple</code>,<code>Union</code>,<code>List</code>都是用来判断类型的，<code>paramsT</code>是判断<code>optimizer</code>接收的参数<code>params</code>是否是正确的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paramsT: TypeAlias = <span class="type">Union</span>[Iterable[torch.Tensor], Iterable[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]]]</span><br></pre></td></tr></table></figure><h3 id="step1.-初始化">step1. 初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdamW</span>(<span class="title class_ inherited__">Optimizer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 params: paramsT,</span></span><br><span class="line"><span class="params">                 lr: <span class="type">Union</span>[<span class="built_in">float</span>, Tensor] = <span class="number">1e-3</span>,</span></span><br><span class="line"><span class="params">                 betas: <span class="type">Tuple</span>[<span class="built_in">float</span>, <span class="built_in">float</span>] = (<span class="params"><span class="number">0.9</span>, <span class="number">0.999</span></span>),</span></span><br><span class="line"><span class="params">                 eps: <span class="built_in">float</span> = <span class="number">1e-8</span>,</span></span><br><span class="line"><span class="params">                 weight_decay: <span class="built_in">float</span> = <span class="number">1e-2</span></span>):</span><br><span class="line">        defaults = <span class="built_in">dict</span>(</span><br><span class="line">        lr=lr,</span><br><span class="line">            betas=betas,</span><br><span class="line">            eps=eps,</span><br><span class="line">            weight_decay=weight_decay</span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">super</span>().__init__(params, defaults)</span><br></pre></td></tr></table></figure><h3 id="step2.-step函数框架">step2. step函数框架</h3><p><code>step()</code>接收一个参数<code>closure</code>，其作用是当需要多次评价损失函数的时候返回损失函数，在绝大多数情况下，都不会用到<code>closure</code>，因此我们不会详细展开（详情见官方文档：https://pytorch.org/docs/stable/optim.html#optimizer-step-closure）。</p><p>step函数整体而言分为三个部分，定义列表、初始化列表、参数更新。本节主要定义step函数的框架。初始化列表和参数更新会在后续小节进行讨论。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self, closure=<span class="literal">None</span></span>):</span><br><span class="line">    loss = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> closure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        loss = closure()</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> self.param_groups:</span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        <span class="comment"># 在这里定义一系列的列表</span></span><br><span class="line">        <span class="comment"># 将所有模型参数、梯度、state、超参数等都放到列表中</span></span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        <span class="comment"># 在这里初始化前面定义的所有列表</span></span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        self._init_group(...)</span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        <span class="comment"># 在这里进行参数更新</span></span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        self._single_tensor_adamw(...)</span><br></pre></td></tr></table></figure><p>接下来我们看一下<code>AdamW</code>该如何按照这个框架来实现：</p><p>从数学表达式可以得知，<code>AdamW</code>的每一步需要接收2个模型相关参数：<code>param</code>、<code>grad</code>，4个超参数，以及3个state：<span class="math inline">\(m_t\)</span>、<span class="math inline">\(v_t\)</span>、<span class="math inline">\(t\)</span>，在代码中，我们分别使用<code>exp_avg</code>、<code>exp_avg_sq</code>和<code>step</code>来表示这三个state。其中，超参数对于同一个组里的所有<code>param</code>都是一样的，而其余变量则随<code>param</code>变化而变化。因此需要定义5个列表来储存这些变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">params_with_grad = []</span><br><span class="line">grads = []</span><br><span class="line">state_steps = []</span><br><span class="line">exp_avgs = []</span><br><span class="line">exp_avg_sqs = []</span><br></pre></td></tr></table></figure><p>初始化所有列表：由于所有信息都在<code>group</code>中，因此传入<code>group</code>和5个空列表，将<code>group</code>中的信息提取到列表里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">self._init_group(</span><br><span class="line">    group,</span><br><span class="line">    params_with_grad,</span><br><span class="line">    grads,</span><br><span class="line">    exp_avgs,</span><br><span class="line">    exp_avg_sqs,</span><br><span class="line">    state_steps,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>参数更新：参数更新的时候就不再传入<code>groups</code>了，传入之前初始化的5个列表，并将所有超参数分开传入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">self._single_tensor_adamw(params=params_with_grad,</span><br><span class="line">                          grads=grads,</span><br><span class="line">                          exp_avgs=exp_avgs,</span><br><span class="line">                          exp_avg_sqs=exp_avg_sqs,</span><br><span class="line">                          state_steps=state_steps,</span><br><span class="line">                          beta1=group[<span class="string">&quot;betas&quot;</span>][<span class="number">0</span>],</span><br><span class="line">                          beta2=group[<span class="string">&quot;betas&quot;</span>][<span class="number">1</span>],</span><br><span class="line">                          lr=group[<span class="string">&quot;lr&quot;</span>],</span><br><span class="line">                          weight_decay=group[<span class="string">&quot;weight_decay&quot;</span>],</span><br><span class="line">                          eps=group[<span class="string">&quot;eps&quot;</span>])</span><br></pre></td></tr></table></figure><p>综上，<code>AdamW</code>的<code>step</code>函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self, closure=<span class="literal">None</span></span>):</span><br><span class="line">    loss = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> closure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        loss = closure()</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> self.param_groups:</span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        <span class="comment"># 在这里定义一系列的列表</span></span><br><span class="line">        <span class="comment"># 将所有模型参数、梯度、state、超参数等都放到列表中</span></span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        params_with_grad = []</span><br><span class="line">        grads = []</span><br><span class="line">        state_steps = []</span><br><span class="line">        exp_avgs = []</span><br><span class="line">        exp_avg_sqs = []</span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        <span class="comment"># 在这里初始化前面定义的所有列表</span></span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        self._init_group(</span><br><span class="line">            group,</span><br><span class="line">            params_with_grad,</span><br><span class="line">            grads,</span><br><span class="line">            exp_avgs,</span><br><span class="line">            exp_avg_sqs,</span><br><span class="line">            state_steps,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        <span class="comment"># 在这里进行参数更新</span></span><br><span class="line">        <span class="comment"># ---------------------------------------------- #</span></span><br><span class="line">        self._single_tensor_adamw(params=params_with_grad,</span><br><span class="line">                                  grads=grads,</span><br><span class="line">                                  exp_avgs=exp_avgs,</span><br><span class="line">                                  exp_avg_sqs=exp_avg_sqs,</span><br><span class="line">                                  state_steps=state_steps,</span><br><span class="line">                                  beta1=group[<span class="string">&quot;betas&quot;</span>][<span class="number">0</span>],</span><br><span class="line">                                  beta2=group[<span class="string">&quot;betas&quot;</span>][<span class="number">1</span>],</span><br><span class="line">                                  lr=group[<span class="string">&quot;lr&quot;</span>],</span><br><span class="line">                                  weight_decay=group[<span class="string">&quot;weight_decay&quot;</span>],</span><br><span class="line">                                  eps=group[<span class="string">&quot;eps&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="step3.-初始化列表">step3. 初始化列表</h3><p>主要解决<span class="math inline">\(t=0\)</span>时刻<code>state</code>中的变量的初始化的问题。剩下就是把所有的变量加到列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_init_group</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                group,</span></span><br><span class="line"><span class="params">                params_with_grad,</span></span><br><span class="line"><span class="params">                grads,</span></span><br><span class="line"><span class="params">                exp_avgs,</span></span><br><span class="line"><span class="params">                exp_avg_sqs,</span></span><br><span class="line"><span class="params">                state_steps</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> group[<span class="string">&#x27;params&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> p.grad <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        params_with_grad.append(p)</span><br><span class="line">        grads.append(p.grad)</span><br><span class="line">        </span><br><span class="line">        state = self.state[p]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(state) == <span class="number">0</span>:</span><br><span class="line">            state[<span class="string">&#x27;step&#x27;</span>] = torch.tensor(<span class="number">0.0</span>, dtype=torch.float64)</span><br><span class="line">            state[<span class="string">&#x27;exp_avg&#x27;</span>] = torch.zeros_like(p, memory_format=torch.preserve_format)</span><br><span class="line">            state[<span class="string">&#x27;exp_avg_sq&#x27;</span>] = torch.zeros_like(p, memory_format=torch.preserve_format)</span><br><span class="line"></span><br><span class="line">        state_steps.append(state[<span class="string">&#x27;step&#x27;</span>])</span><br><span class="line">        exp_avgs.append(state[<span class="string">&#x27;exp_avg&#x27;</span>])</span><br><span class="line">        exp_avg_sqs.append(state[<span class="string">&#x27;exp_avg_sq&#x27;</span>])</span><br></pre></td></tr></table></figure><p>注意当要初始化要分类讨论的时候要加<code>None</code>占位，确保<code>prams[i]</code>的所有相关变量都在列表的第i位。</p><h3 id="step4.-参数更新">step4. 参数更新</h3><p>逐行公式与代码对应：</p><h4 id="更新滑动平均">更新滑动平均</h4><p><span class="math display">\[m_t \leftarrow \beta_1 m_t+(1-\beta_1)g_t\]</span></p><p>这里直接用插值函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp_avg.lerp_(grad, <span class="number">1</span> - beta1)</span><br></pre></td></tr></table></figure><p><span class="math display">\[v_t\leftarrow \beta_2 v_t+(1-\beta_2)g_t^2\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp_avg_sq.addcmul_(grad, grad, value=<span class="number">1</span> - beta2)</span><br></pre></td></tr></table></figure><h4 id="计算bias-correction">计算bias correction</h4><p><span class="math display">\[\hat{m}_t\leftarrow \frac{m_t}{(1-\beta_1^t)}\\\hat{v}_t\leftarrow \frac{v_t}{(1-\beta_2^t)}\\\]</span></p><p>这里由于不希望占用内存空间来计算<span class="math inline">\(\hat{m}_t\)</span>和<span class="math inline">\(\hat{v}_t\)</span>​，因此仅计算分母。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bias_correction1 = <span class="number">1</span> - beta1 ** step_t</span><br><span class="line">bias_correction2 = <span class="number">1</span> - beta2 ** step_t</span><br></pre></td></tr></table></figure><h4 id="weight-decay">weight decay</h4><p>weight decay被单独拿出来进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param.mul_(<span class="number">1</span> - lr * weight_decay)</span><br></pre></td></tr></table></figure><h4 id="更新参数">更新参数</h4><p>在去除了weight decay后，更新参数的公式如下：</p><p><span class="math display">\[\theta_t \leftarrow \theta_{t-1}-\eta_t(\frac{\hat{m_t}}{\sqrt{\hat{v}_t}+\epsilon})\]</span></p><p>将其使用<code>bisa_correction</code>和<span class="math inline">\(m_t\)</span>，<span class="math inline">\(v_t\)</span>表示：</p><p><span class="math display">\[\theta_t\leftarrow \theta_{t-1} - \frac{\eta_t}{(1-\beta_1^t)}m_t\Big(\big(\frac{\sqrt{v_t}}{\sqrt{1-\beta_2^t} }\big)+\epsilon\Big)^{-1}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">step_size = lr / bias_correction1</span><br><span class="line">bias_correction2_sqrt = bias_correction2.sqrt()</span><br><span class="line">denom = (exp_avg_sq.sqrt() / bias_correction2_sqrt).add_(eps)</span><br><span class="line">param.addcdiv_(exp_avg, denom, value=-step_size)</span><br></pre></td></tr></table></figure><p>第一个和第三个式子分别计算的是<span class="math inline">\(\frac{\eta_t}{(1-\beta_1^t)}\)</span>和<span class="math inline">\(\big(\frac{\sqrt{v_t}}{\sqrt{1-\beta_2^t} }\big)+\epsilon\)</span></p><p>最终所参数更新部分的所有代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_single_tensor_adamw</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                         params: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">                         grads: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">                         exp_avgs: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">                         exp_avg_sqs: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">                         state_steps: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">                         beta1: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">                         beta2: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">                         lr: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">                         weight_decay: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">                         eps: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i, param <span class="keyword">in</span> <span class="built_in">enumerate</span>(params):</span><br><span class="line">        grad = grads[i]</span><br><span class="line">        exp_avg = exp_avgs[i]</span><br><span class="line">        exp_avg_sq = exp_avg_sqs[i]</span><br><span class="line">        step_t = state_steps[i]</span><br><span class="line">        <span class="comment"># update step</span></span><br><span class="line">        step_t += <span class="number">1</span></span><br><span class="line">        <span class="comment"># weight decay</span></span><br><span class="line">        param.mul_(<span class="number">1</span> - lr * weight_decay)</span><br><span class="line">        <span class="comment"># update exp_avg and exp_avg_sq</span></span><br><span class="line">        exp_avg.lerp_(grad, <span class="number">1</span> - beta1)</span><br><span class="line">        exp_avg_sq.mul_(beta2).addcmul_(grad, grad, value=<span class="number">1</span> - beta2)</span><br><span class="line">        <span class="comment"># step = _get_value(step_t)</span></span><br><span class="line">        bias_correction1 = <span class="number">1</span> - beta1 ** step_t</span><br><span class="line">        bias_correction2 = <span class="number">1</span> - beta2 ** step_t</span><br><span class="line"></span><br><span class="line">        step_size = lr / bias_correction1</span><br><span class="line">        bias_correction2_sqrt = bias_correction2.sqrt()</span><br><span class="line"></span><br><span class="line">        denom = (exp_avg_sq.sqrt() / bias_correction2_sqrt).add_(eps)</span><br><span class="line"></span><br><span class="line">        param.addcdiv_(exp_avg, denom, value=-step_size)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化器 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速入门：如何在Linux服务器上跑爬虫</title>
      <link href="/2023/12/20/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/"/>
      <url>/2023/12/20/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门在linux服务器上部署和运行爬虫程序">快速入门：在Linux服务器上部署和运行爬虫程序</h1><h2 id="服务器准备工作">服务器准备工作</h2><h3 id="购买一个服务器实例">购买一个服务器实例</h3><p>以阿里云为例，阿里云现在有学生优惠，可以在以下链接领取：https://university.aliyun.com/</p><p>然后租一个2核2G的服务器，仅需285元，优惠下来只需0元即可租一年，还多出来15块钱可以缴十几个G的流量钱。</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/%E9%98%BF%E9%87%8C%E4%BA%91-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E7%95%8C%E9%9D%A2.png" /></p><h3 id="绑定弹性网卡">绑定弹性网卡</h3><blockquote><p>参考：</p><p>弹性网卡概述：<a href="https://help.aliyun.com/zh/ecs/user-guide/overview-48">弹性网卡概述_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p><p>如何创建弹性网卡：<a href="https://help.aliyun.com/zh/ecs/user-guide/create-an-eni">如何创建弹性网卡_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p></blockquote><p>绑定弹性网卡的功能：</p><ol type="1"><li>绑定弹性网卡以访问外网</li><li>获得公网ip，从而可以ssh访问</li></ol><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%BC%B9%E6%80%A7%E7%BD%91%E5%8D%A1.png" /></p><h3 id="设置安全组">设置安全组</h3><blockquote><p>参考：</p><p>安全组概述：<a href="https://help.aliyun.com/zh/ecs/user-guide/overview-44">什么是安全组_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p><p>设置安全组：<a href="https://help.aliyun.com/zh/ecs/user-guide/create-a-security-group-1">如何创建一个安全组并设置安全组规则_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p></blockquote><p>服务器设有防火墙，如果需要从本地访问服务器的MongoDB，则会被服务器的防火墙阻拦，因此需要设置安全组，允许访问27017端口。</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85mongodb/%E9%98%BF%E9%87%8C%E4%BA%91-%E5%AE%89%E5%85%A8%E7%BB%84.png" /></p><h2 id="配置mongodb">配置MongoDB</h2><h3 id="安装mongodb">安装MongoDB</h3><blockquote><p>参考：<a href="https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/">在 Ubuntu 上安装 MongoDB Community Edition — MongoDB 手册</a></p></blockquote><p>主要参照MongoDB手册，为了阅读方便，将关键内容摘抄如下：</p><h4 id="导入mongodb的public-key">1. 导入MongoDB的public key</h4><p>安装<code>gnupg</code>和<code>curl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnupg curl</span><br></pre></td></tr></table></figure><p>导入 MongoDB public GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://pgp.mongodb.com/server-7.0.asc | \</span><br><span class="line">   sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \</span><br><span class="line">   --dearmor</span><br></pre></td></tr></table></figure><p>创建MongoDB的列表文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-7.0.list</span><br></pre></td></tr></table></figure><p>更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装最新的稳定版的MongoDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure><p>在systemd下启动MongoDB</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mongod</span><br></pre></td></tr></table></figure><h3 id="创建管理员">创建管理员</h3><p>为了防止被攻击，需要设定管理员角色，这样的话访问MongoDB需要账户密码。</p><h4 id="启用访问控制">1. 启用访问控制</h4><p>编辑 MongoDB 的配置文件（通常是 <code>etc/mongod.conf</code>），以启用访问控制。在配置文件中添加或更新以下行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>这将启用用户认证。</p><blockquote><p>一般情况下服务器进去默认在root，etc和root在同一级文件夹中，访问etc需要先到上一级文件夹再访问</p></blockquote><h4 id="重启-mongodb-服务">2. 重启 MongoDB 服务</h4><p>更改配置后，需要重启 MongoDB 服务以应用更改。这通常可以通过以下命令完成（systemd系统下）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mongod</span><br></pre></td></tr></table></figure><h4 id="连接到-mongodb-shell">3. 连接到 MongoDB Shell</h4><p>使用 MongoDB Shell 连接到数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh</span><br></pre></td></tr></table></figure><h4 id="创建管理员用户">4. 创建管理员用户</h4><p>在 MongoDB Shell 中，切换到 <code>admin</code> 数据库并创建一个新用户：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.<span class="title function_">createUser</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;your_user_name&quot;</span>,</span><br><span class="line">  <span class="attr">pwd</span>: <span class="string">&quot;your_password&quot;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [&#123; <span class="attr">role</span>: <span class="string">&quot;userAdminAnyDatabase&quot;</span>, <span class="attr">db</span>: <span class="string">&quot;admin&quot;</span> &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将 <code>"myAdmin"</code> 和 <code>"adminPassword"</code> 替换为自己的用户名和密码。</p><h4 id="退出并以管理员身份重新登录">5. 退出并以管理员身份重新登录</h4><p>退出 MongoDB Shell（使用 <code>exit</code> 命令），然后使用您刚创建的管理员账户重新登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh -u &lt;your_user_name&gt; -p &lt;your_password&gt; --authenticationDatabase admin</span><br></pre></td></tr></table></figure><h2 id="tmux">tmux</h2><blockquote><p>参考：<a href="https://blog.csdn.net/Naisu_kun/article/details/119567566">Linux笔记：终端复用与管理工具screen和tmux_tmux和screen-CSDN博客</a></p><p>更多功能参见：<a href="https://www.bilibili.com/video/BV1ML411h7tF">终端神器tmux：多任务管理大师</a></p></blockquote><p>假设已经可以通过ssh连接服务器了，为了保证程序可以在后台运行，需要使用终端复用与管理工具<code>tmux</code>。</p><h3 id="安装tmux">安装tmux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tmux</span><br></pre></td></tr></table></figure><h3 id="常用命令">常用命令</h3><ol type="1"><li><p>创建一个名为name新会话并进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s name</span><br></pre></td></tr></table></figure></li><li><p>进入一个已经创建了的会话：</p></li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a -t name</span><br></pre></td></tr></table></figure></p><ol start="3" type="1"><li><p>退出会话：先按<code>ctrl+b</code>，然后再按<code>d</code></p></li><li><p>上下翻页：先按<code>ctrl+b</code>，然后再按<code>PgUp</code>，按<code>q</code>退出</p></li><li><p>结束会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill-session -t name</span><br></pre></td></tr></table></figure></li></ol><p>使用<code>tmux</code>创建一个会话并在其中运行爬虫程序，这样断开ssh连接后爬虫仍会继续运行。</p><h2 id="mongodb相关问题">MongoDB相关问题</h2><h3 id="错误代码14">错误代码14</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">× mongod.service - MongoDB Database Server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/mongod.service; disabled; vendor preset: enabled)</span><br><span class="line">     Active: failed (Result: exit-code) since Sun 2024-01-21 11:34:16 CST; 7min ago</span><br><span class="line">       Docs: https://docs.mongodb.org/manual</span><br><span class="line">    Process: 15798 ExecStart=/usr/bin/mongod --config /etc/mongod.conf (code=exited, status=14)</span><br><span class="line">   Main PID: 15798 (code=exited, status=14)</span><br><span class="line">        CPU: 591ms</span><br><span class="line"></span><br><span class="line">Jan 21 11:34:15 iZ2ze5le5fm8myuecguyayZ systemd[1]: Started MongoDB Database Server.</span><br><span class="line">Jan 21 11:34:16 iZ2ze5le5fm8myuecguyayZ mongod[15798]: &#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2024-01-21T03:34:16.004Z&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;I&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;CONTROL&quot;</span>,  <span class="string">&quot;i&gt;</span></span><br><span class="line"><span class="string">Jan 21 11:34:16 iZ2ze5le5fm8myuecguyayZ systemd[1]: mongod.service: Main process exited, code=exited, status=14/n/a</span></span><br><span class="line"><span class="string">Jan 21 11:34:16 iZ2ze5le5fm8myuecguyayZ systemd[1]: mongod.service: Failed with result &#x27;exit-code&#x27;.</span></span><br></pre></td></tr></table></figure><p>没有足够的访问权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R mongodb:mongodb /var/lib/mongodb</span><br><span class="line">sudo <span class="built_in">chmod</span> -R 700 /var/lib/mongodb</span><br></pre></td></tr></table></figure><ol type="1"><li><strong><code>sudo chown -R mongodb:mongodb /var/lib/mongodb</code></strong>:<ul><li>这条命令会递归地（由 <code>-R</code> 参数指定）更改 <code>/var/lib/mongodb</code> 目录的所有权，包括目录内的所有文件和子目录。</li><li><code>mongodb:mongodb</code> 指定了新的所有者和所属组，这里两者都是 <code>mongodb</code>。这表示该目录及其内容的所有者和所属组都更改为 <code>mongodb</code> 用户和组。</li><li>这样做确保了运行 MongoDB 服务的用户（通常是 <code>mongodb</code> 用户）有权读取和写入这个目录，这对于 MongoDB 存储数据和日志至关重要。</li></ul></li><li><strong><code>sudo chmod -R 700 /var/lib/mongodb</code></strong>:<ul><li>这条命令同样递归地更改 <code>/var/lib/mongodb</code> 目录的权限。</li><li><code>700</code> 是一个八进制数，代表着设置的权限。在这个上下文中，<code>7</code> 表示目录的所有者（<code>mongodb</code> 用户）有读、写和执行（访问）权限；而后面两个 <code>0</code> 表示其他用户和组没有任何权限。</li><li>这意味着只有目录的所有者（<code>mongodb</code> 用户）可以读取、写入和进入该目录，而其他任何用户都无法访问。这是一种安全措施，防止未经授权的访问或修改 MongoDB 的数据。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> mongodb </tag>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github pages部署个人博客</title>
      <link href="/2023/12/19/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/"/>
      <url>/2023/12/19/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/</url>
      
        <content type="html"><![CDATA[<h1 id="hexogithub-pages部署个人博客">Hexo+github pages部署个人博客</h1><p>参考：</p><blockquote><p><a href="https://www.fomal.cc/posts/e593433d.html">Hexo博客搭建基础教程(一) | Fomalhaut🥝</a></p><p><a href="https://www.fomal.cc/posts/4aa2d85f.html#5-基础用法说明">Hexo博客搭建基础教程(二) | Fomalhaut🥝</a></p><p><a href="https://butterfly.js.org/posts/ceeb73f/#美化-特效">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p></blockquote><h2 id="step1.-安装node.js和npm">step1. 安装Node.js和npm</h2><ul><li><p>访问 <a href="https://nodejs.org/">Node.js 官网</a> 下载Node.js</p></li><li><p>安装完成后，可以在命令行中输入以下命令来验证安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="step2.-hexo的安装与初始化">step2. Hexo的安装与初始化</h2><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化">初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> BlogRoot</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="安装依赖">安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="在本地运行hexo服务器">在本地运行Hexo服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="step3.-部署到github-pages上">step3. 部署到github pages上</h2><ol type="1"><li><p>创建一个github仓库，名称必须为<code>&lt;username&gt;.github.io</code></p></li><li><p>创建ssh密钥，一路回车</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></p><p>在users/username/.ssh中可以看到生成的密钥文件，其中以<code>.pub</code>为结尾的是公钥。在github的<code>settings &gt; SSH and GPG keys</code>的<code>SSH keys</code>中点击<code>New SSH key</code>，复制公钥并添加。</p><p>检测是否能与github正常通信：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p></li><li><p>在<code>BlogRoot/_config.yml</code>中设置deploy选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:&lt;repository git&gt;</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>部署</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="step4.-基于butterfly设置blog样式">step4. 基于butterfly设置blog样式</h2><h3 id="butterfly-安装">butterfly 安装</h3><ol type="1"><li><p>在<code>BlogRoot</code>目录下下载butterfly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li><li><p>安装主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure></li><li><p>安装hexo渲染插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.yml</code>中将<code>theme</code>的值更改为butterfly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li></ol><h3 id="butterfly设置">butterfly设置</h3><ol type="1"><li><p>标签页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>该指令会在<code>BlogRoot/source</code>下生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。进入<code>index.md</code>并添加<code>type: "tags"</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-10-28 12:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>404页面</p><p>将false改为true</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;Page Not Found&#x27;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="butterfly主题设置">butterfly主题设置</h3><h4 id="menu">menu</h4><p>在这里可以修改menu界面，冒号前为显示的名称，冒号后为文件夹名称，注意要通过<code>hexo new page &lt;文件夹名称&gt;</code>来创建文件夹</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20menu.png" /></p><h4 id="代码风格">代码风格</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20code%20block.png" /></p><h4 id="社交信息">社交信息</h4><p>可以放一些github和email之类的</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly-social%20settings.png" /></p><h4 id="网站图标">网站图标</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-Favicon.png" /></p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20favicon.png" /></p><p>将图片添加至<code>BlogRoot/themes/butterfly/source/img</code>，并修改图片地址</p><h4 id="头像横幅页面图标">头像、横幅、页面图标</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20img.png" /></p><h4 id="搜索栏">搜索栏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在<code>BlogRoot/_config.yml</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/部署个人blog/butterfly%20search.png" /></p><p>将<code>enable</code>和<code>preload</code>改为true</p><h4 id="cover">cover</h4><p>文章封面，需要在文章开头的yml中添加<code>cover</code>才会生效，但个设置多个<code>default_cover</code>时，会选一个展示</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-cover.png" /></p><h4 id="post">post</h4><p>如何显示时间，是否显示标签等</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-post.png" /></p><h4 id="wordcount">wordcount</h4><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>将wordcount的<code>enable</code>改为<code>true</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="文章过期提醒">文章过期提醒</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-outdated.png" /></p><h4 id="自定义颜色">自定义颜色</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-color.png" /></p><h4 id="background">background</h4><p>当使用本地图片时，填img开始的相对路径，注意img前要加斜杠</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-background.png" /></p><h4 id="侧边栏相关配置">侧边栏相关配置</h4><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BAblog/butterfly-aside.png" /></p><h4 id="pandoc-与-mathjax">pandoc 与 mathjax</h4><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/544093361">知乎、Hexo的markdown中LaTeX公式相关问题。</a></p></blockquote><p>将mathjax设置为<code>true</code>在需要渲染的blog前加入<code>mathjax: true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用Graphviz画有向图/无向图</title>
      <link href="/2022/10/07/graphviz/"/>
      <url>/2022/10/07/graphviz/</url>
      
        <content type="html"><![CDATA[<h1 id="如何利用graphviz画有向图无向图">如何利用Graphviz画有向图/无向图</h1><h2 id="任务说明">任务说明</h2><p>我现在有一张图，这张图的储存方式为：</p><ul><li>一个列表包含所有节点</li><li>节点中储存着节点与节点之间的关系</li></ul><p>这张图的结构为：</p><ul><li>节点分为输入节点，中间节点和输出节点</li><li>我希望输出节点和输入节点能够在一排或一列显示</li></ul><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/graphviz/Digraph.gv.jpg" /></p><h2 id="安装graphviz">安装Graphviz</h2><p>graphviz实际上是一个软件，但是可以用python生成dot脚本，再用graphviz解析得到图片</p><h3 id="step1.-下载graphviz软件">step1. 下载Graphviz软件</h3><p>下载路径：</p><p>https://graphviz.gitlab.io/_pages/Download/Download_windows.html</p><p>安装时需要将bin文件夹的路径加入到环境变量path</p><p>注意在安装的时候会有提示是否要把bin加入环境变量，直接勾选即可，省去很多步骤</p><h3 id="step2.-pip安装graphviz">step2. pip安装graphviz</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure><h2 id="graphviz的一些使用方法">Graphviz的一些使用方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> graphviz <span class="keyword">as</span> gz</span><br></pre></td></tr></table></figure><h3 id="创建图">创建图</h3><p>有向图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph = gz.Digraph()</span><br></pre></td></tr></table></figure><p>无向图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph = gz.Graph()</span><br></pre></td></tr></table></figure><h3 id="创建节点">创建节点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.node(name=<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>name只能为字符串</p><p>node属性：</p><table><thead><tr class="header"><th style="text-align: center;">attrs</th><th style="text-align: center;">describe</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">name</td><td style="text-align: center;">相当于id</td></tr><tr class="even"><td style="text-align: center;">color</td><td style="text-align: center;">边框颜色，如果style='filled'为填充颜色可以用关键字，比如black，也可以用16进制</td></tr><tr class="odd"><td style="text-align: center;">style</td><td style="text-align: center;">filled-进行填充</td></tr><tr class="even"><td style="text-align: center;">label</td><td style="text-align: center;">node在图中显示的内容</td></tr><tr class="odd"><td style="text-align: center;">shape</td><td style="text-align: center;">node的形状，关键词见下图</td></tr><tr class="even"><td style="text-align: center;">fontname</td><td style="text-align: center;">更改字体</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/lzhqw/image-resources/main/img/graphviz/20221007165448.jpg" /></p><h3 id="创建关系">创建关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.edge(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="画图">画图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.view()</span><br></pre></td></tr></table></figure><h3 id="使用子图对输入节点和输出节点的位置进行规定">使用子图对输入节点和输出节点的位置进行规定</h3><p>参考:python中graphviz中的图节点位置(https://www.codenong.com/34747843/)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph = gz.Digraph()</span><br><span class="line">top = gz.Digraph()</span><br><span class="line">top.graph_attr.update(rank=<span class="string">&#x27;min&#x27;</span>)</span><br><span class="line"><span class="comment"># 将输入节点添加到top中，其余节点添加到graph中，edge的创建则依然在graph中创建</span></span><br><span class="line"><span class="comment"># ···略去一些添加节点和边步骤</span></span><br><span class="line"><span class="comment"># 然后将s加入到graph的子图中即可</span></span><br><span class="line">graph.subgraph(s)</span><br><span class="line">graph.view()</span><br></pre></td></tr></table></figure><p>如果要输出节点也对其的话只需要再添加一个子图，rank设为max即可。但注意这可能并没有解决所有图的对其问题，如果有更多的行/列需要对齐呢？</p><h2 id="附录">附录</h2><p>graphviz所有的属性 见 (https://www.cnblogs.com/Zzbj/p/11431015.html)</p><p>基础教程 见 (https://www.jb51.net/article/174842.htm)</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphviz </tag>
            
            <tag> 画图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计学：卡方分布临界值的计算</title>
      <link href="/2022/03/19/%E5%8D%A1%E6%96%B9%E5%88%86%E5%B8%83%E4%B8%B4%E7%95%8C%E5%80%BC%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2022/03/19/%E5%8D%A1%E6%96%B9%E5%88%86%E5%B8%83%E4%B8%B4%E7%95%8C%E5%80%BC%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="统计学卡方分布临界值的计算">统计学：卡方分布临界值的计算</h1><h2 id="前言">前言</h2><p>做应用统计分析的课后习题时，有一道题的<span class="math inline">\(\chi^2\)</span>分布临界值在表上查不到。老师给出的解决办法是在EXCEL中用=CHISQ.INV.RT(<span class="math inline">\(\alpha\)</span>, n)来计算。但是这样未免有些无聊，为什么不自己写一个程序呢？</p><h2 id="准备知识">准备知识</h2><h3 id="卡方分布的分布函数">卡方分布的分布函数</h3><p><span class="math display">\[F(x,k)=\frac{\gamma (\frac{k}{2},\frac{x}{2})}{\Gamma(\frac{k}{2})}\]</span></p><p>其中： <span class="math display">\[\gamma (s,x)=\int_0^xe^{-t}t^{s-1}dt\]</span> <span class="math display">\[\Gamma (s)=\int_0^\infty e^{-t}t^{s-1}dt\]</span></p><h3 id="临界值">临界值</h3><p><span class="math display">\[P(X&lt;x)=F(x,k)\]</span></p><figure><img src="https://www.gigacalculator.com/img/calculators/two-tailed-z-critical-value.png" alt="two tailed z critical value" /><figcaption aria-hidden="true">two tailed z critical value</figcaption></figure><p>所谓临界值就是求得一个<span class="math inline">\(x\)</span>使得<span class="math inline">\(P(X&lt;x)\)</span>大于等于置信水平。 由此我们列出关于<span class="math inline">\(x\)</span>的方程，其中<span class="math inline">\(\alpha\)</span>为拒绝域面积，1-<span class="math inline">\(\alpha\)</span>为置信水平： <span class="math display">\[F(x,k)=1-\alpha\]</span></p><h3 id="scipy模块">scipy模块</h3><p>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。 本次用到SciPy中的积分模块和求解非线性方程组的模块</p><p>含参数定积分： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> integrate</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * x + b</span><br><span class="line">v, err = integrate.quad(f, <span class="number">1</span>, <span class="number">2</span>, args = (-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> v</span><br></pre></td></tr></table></figure> 非线性方程求解（最小二乘法）： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = fsolve(func,[])</span><br><span class="line"><span class="comment">#[]中为初值</span></span><br></pre></td></tr></table></figure></p><h2 id="python实现">python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> integrate</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</span><br><span class="line"><span class="comment">#定义伽马函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gamma</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">t,s</span>):</span><br><span class="line">        <span class="keyword">return</span> math.exp(-t)*<span class="built_in">pow</span>(t,s-<span class="number">1</span>)</span><br><span class="line">    v,err=integrate.quad(f,<span class="number">0</span>,<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),args=(s))</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="comment">#定义上不完全伽马函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LI_gamma</span>(<span class="params">s,x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">t,s</span>):</span><br><span class="line">        <span class="keyword">return</span> math.exp(-t)*<span class="built_in">pow</span>(t,s-<span class="number">1</span>)</span><br><span class="line">    v,err=integrate.quad(f,<span class="number">0</span>,x,args=(s))</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="comment">#定义卡方分布的分布函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fchi</span>(<span class="params">x,k</span>):</span><br><span class="line">    F=LI_gamma(k/<span class="number">2</span>,x/<span class="number">2</span>)/gamma(k/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> F</span><br><span class="line"><span class="comment">#方程求解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cv_chi</span>(<span class="params">alpha,n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> Fchi(x,n)-<span class="number">1</span>+alpha</span><br><span class="line">    r=optimize.fsolve(func,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><p>运行结果： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alpha=<span class="number">0.025</span>,n=<span class="number">40</span>: <span class="number">59.341707143171185</span></span><br><span class="line">alpha=<span class="number">0.025</span>,n=<span class="number">10</span>: <span class="number">20.483177350807395</span></span><br></pre></td></tr></table></figure> 与卡方分布临界值表完全一致</p><h2 id="参考文献">参考文献</h2><p><a href="https://www.zhihu.com/question/30020592">卡方分布的概率密度函数推导过程? - 知乎 (zhihu.com)</a></p><p><a href="https://en.wikipedia.org/wiki/Chi-squared_distribution">卡方分布 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://en.wikipedia.org/wiki/Incomplete_gamma_function#Regularized_Gamma_functions_and_Poisson_random_variables">不完全伽玛函数 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://zhuanlan.zhihu.com/p/24893371">Python 解方程的三种方法 - 知乎(zhihu.com)</a></p><p><a href="https://www.cnblogs.com/Yanjy-OnlyOne/p/11185582.html">python Scipy积分运算大全（integrate模块——一重、二重及三重积分） - The-Chosen-One - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计 </tag>
            
            <tag> 卡方分布 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
